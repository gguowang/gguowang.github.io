<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Psych1&#39;s Blog</title>
  <icon>https://www.psych1.cn/icon.png</icon>
  <subtitle>功不唐捐 玉汝于成</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.psych1.cn/"/>
  <updated>2020-08-04T15:17:52.233Z</updated>
  <id>https://www.psych1.cn/</id>
  
  <author>
    <name>psych1</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Activity生命周期</title>
    <link href="https://www.psych1.cn/post/16237.html"/>
    <id>https://www.psych1.cn/post/16237.html</id>
    <published>2020-08-04T01:00:00.000Z</published>
    <updated>2020-08-04T15:17:52.233Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;先放上Android API官方图镇楼。&lt;br&gt;&lt;img data-src=&quot;https://img-blog.csdnimg.cn/2019031714565797.gif&quot; alt=&quot;oncreate()-&amp;gt;onstart()-&amp;gt;onResume()-&amp;gt;onRestart()-&amp;gt;onPouse()-&amp;gt;onStop()-&amp;gt;onDestory()&quot;&gt;&lt;br&gt;oncreate()-&amp;gt;onstart()-&amp;gt;onResume()-&amp;gt;onRestart()-&amp;gt;onPouse()-&amp;gt;onStop()-&amp;gt;onDestory()&lt;/p&gt;
    
    </summary>
    
    
      <category term="生命周期" scheme="https://www.psych1.cn/categories/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
    
      <category term="Android" scheme="https://www.psych1.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android反调试检测</title>
    <link href="https://www.psych1.cn/post/59192.html"/>
    <id>https://www.psych1.cn/post/59192.html</id>
    <published>2020-08-03T16:00:00.000Z</published>
    <updated>2020-08-04T15:17:52.233Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java层保护&quot;&gt;&lt;a href=&quot;#java层保护&quot; class=&quot;headerlink&quot; title=&quot;java层保护&quot;&gt;&lt;/a&gt;java层保护&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1 代码混淆&lt;/strong&gt;&lt;br&gt;apk应用在被逆向分析时，java层代码就像被扒光一样，而native代码分析难度大，但是需要扎实的c/c++基础。这个时候大家就可以考虑一下代码混淆技术稍作保护（毕竟看着好多abc也挺烦的）。Android开发中提供了Proguard这一工具来进行代码混淆。&lt;br&gt;这里只做简单介绍，Proguard是一个开源项目，他能够对Java类中的代码进行压缩（Shrink）,优化（Optimize）,混淆（Obfuscate）,预检（Preveirfy）。　&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;压缩（Shrink）:在压缩处理这一步中，用于检测和删除没有使用的类，字段，方法和属性。&lt;/li&gt;
&lt;li&gt;优化（Optimize）:在优化处理这一步中，对字节码进行优化，并且移除无用指令。&lt;/li&gt;
&lt;li&gt;混淆（Obfuscate）:在混淆处理这一步中，使用a,b,c等无意义的名称，对类，字段和方法进行重命名。&lt;/li&gt;
&lt;li&gt;预检（Preveirfy）:在预检这一步中，主要是在Java平台上对处理后的代码进行预检。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;Proguard在Android Studio中都已经内置，每次新创建一个工程时，都会自动在gradle中被添加。&lt;/p&gt;
    
    </summary>
    
    
      <category term="反调试" scheme="https://www.psych1.cn/categories/%E5%8F%8D%E8%B0%83%E8%AF%95/"/>
    
    
      <category term="Android" scheme="https://www.psych1.cn/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>android系统https抓包问题分析</title>
    <link href="https://www.psych1.cn/post/41193.html"/>
    <id>https://www.psych1.cn/post/41193.html</id>
    <published>2020-08-03T15:03:02.000Z</published>
    <updated>2020-08-04T15:17:52.234Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;每次分析app时都免不了抓包这一环节。想要抓到包就要看app采取的什么通信协议了。由于http存在的种种不安全性，当前大部分的app基本都已经是采用https的通信协议。所以连抓包也变得越来越不友好。不论是使用burpsuite还是fiddler，当前的抓包工具基本原理都是采用的中间人的方式。原理就是这些工具作为中间人，对客户端伪装成服务端，对服务端伪装成客户端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="抓包" scheme="https://www.psych1.cn/categories/%E6%8A%93%E5%8C%85/"/>
    
    
      <category term="Android" scheme="https://www.psych1.cn/tags/Android/"/>
    
  </entry>
  
</feed>
